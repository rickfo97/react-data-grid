{"version":3,"file":"bundle.cjs","sources":["../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/checkboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultRenderersProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/valueFormatter.tsx","../src/formatters/toggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/eventUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/renderMeasuringCells.tsx","../src/utils/selectedCellUtils.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/sortStatus.tsx","../src/DataGrid.tsx","../src/editors/textEditor.tsx"],"sourcesContent":["import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        ref={ref}\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const checkboxFormatter = useDefaultRenderers()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter(\n        {\n          'aria-label': ariaLabel,\n          'aria-labelledby': ariaLabelledBy,\n          tabIndex,\n          disabled,\n          checked: value,\n          onChange\n        },\n        ref\n      )}\n    </>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps, HeaderRendererProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: HeaderRendererProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<HTMLDivElement>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns.join(' ')\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number,\n  isWidthInitialized: boolean\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setWidthInitialized(true);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(size.inlineSize);\n      setBlockSize(size.blockSize);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n","import { useRef, useEffect, useCallback } from 'react';\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useCallback, useState, type MutableRefObject } from 'react';\nimport { scrollIntoView } from '../utils';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(\n  isSelected: boolean,\n  skipCellFocusRef?: MutableRefObject<boolean>\n) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback(\n    (cell: HTMLDivElement | null) => {\n      if (cell === null) return;\n      if (skipCellFocusRef?.current) {\n        skipCellFocusRef.current = false;\n        return;\n      }\n      scrollIntoView(cell);\n      if (cell.contains(document.activeElement)) return;\n      cell.focus({ preventScroll: true });\n    },\n    [skipCellFocusRef]\n  );\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocusable ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  columnWidths: ReadonlyMap<string, number>;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  columnWidths,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  const { viewportColumns, flexWidthViewportColumns } = useMemo((): {\n    viewportColumns: readonly CalculatedColumn<R, SR>[];\n    flexWidthViewportColumns: readonly CalculatedColumn<R, SR>[];\n  } => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return { viewportColumns, flexWidthViewportColumns };\n  }, [startIdx, colOverscanEndIdx, columns]);\n\n  const unsizedFlexWidthViewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return flexWidthViewportColumns.filter((column) => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultRenderers<R, SR>()!.sortStatus!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable, createCellEvent } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  skipCellFocusRef,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected, skipCellFocusRef);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    skipCellFocusRef,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    isChildRow,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    isChildRow ? \"rdg-child-row\" : \"\",\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n          skipCellFocusRef={skipCellFocusRef}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx && childRows.length > 1;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          childRows.length > 1 ? 'rdg-group-row-has-children' : '',\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef, type MutableRefObject, useCallback } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation, createCellEvent } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  EditorProps,\n  Maybe,\n  Omit\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  skipCellFocusRef: MutableRefObject<boolean>;\n  closeEditor: () => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  skipCellFocusRef,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  const cancelFrameRequest = useCallback(() => {\n    skipCellFocusRef.current = false;\n    if (commitOnOutsideClick) {\n      cancelAnimationFrame(frameRequestRef.current!);\n    }\n  }, [commitOnOutsideClick, skipCellFocusRef]);\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      skipCellFocusRef.current = true;\n      if (commitOnOutsideClick) {\n        frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n      }\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [cancelFrameRequest, commitOnOutsideClick, commitOnOutsideMouseDown, skipCellFocusRef]);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({ column, row, isCellSelected: true, onRowChange })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider,\n  RowSelectionProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  renderMeasuringCells,\n  scrollIntoView,\n  createCellEvent\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction,\n  CellMouseEvent,\n  CellClickArgs,\n  CellKeyDownArgs,\n  CellKeyboardEvent\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer = renderers?.rowRenderer ?? defaultRenderers?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultRenderers?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ?? defaultRenderers?.checkboxFormatter ?? defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState((): ReadonlyMap<string, number> => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    () => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n  const skipCellFocusRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current!;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`)!;\n        // Set the actual width of the column after it is rendered\n        const { width } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function handleColumnResize(column: CalculatedColumn<R, SR>, width: number | 'max-content') {\n    const { style } = gridRef.current!;\n    const newTemplateColumns = [...templateColumns];\n    newTemplateColumns[column.idx] = width === 'max-content' ? width : `${width}px`;\n    style.gridTemplateColumns = newTemplateColumns.join(' ');\n\n    const measuringCell = gridRef.current!.querySelector(\n      `[data-measuring-cell-key=\"${column.key}\"]`\n    )!;\n    const measuredWidth = measuringCell.getBoundingClientRect().width;\n    const measuredWidthPx = `${measuredWidth}px`;\n\n    // Immediately update `grid-template-columns` to prevent the column from jumping to its min/max allowed width.\n    // Only measuring cells have the min/max width set for proper colSpan support,\n    // which is why other cells may render at the previously set width, beyond the min/max.\n    // An alternative for the above would be to use flushSync.\n    // We also have to reset `max-content` so it doesn't remain stuck on `max-content`.\n    if (newTemplateColumns[column.idx] !== measuredWidthPx) {\n      newTemplateColumns[column.idx] = measuredWidthPx;\n      style.gridTemplateColumns = newTemplateColumns.join(' ');\n    }\n\n    if (columnWidths.get(column.key) === measuredWidth) return;\n\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, measuredWidth);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n    if (args.type === 'HEADER') {\n      selectAllRows(args.checked);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    const row = rows[rowIdx];\n    if (!isGroupRow(row) && onCellKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx])\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isRowIdxWithinViewportBounds(rowIdx) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const newTemplateColumns = [...templateColumns];\n    for (const column of flexWidthViewportColumns) {\n      newTemplateColumns[column.idx] = column.width as string;\n    }\n\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newTemplateColumns.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor();\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        skipCellFocusRef={skipCellFocusRef}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          isChildRow: hasGroups,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx),\n          skipCellFocusRef\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(-1)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n        </RowSelectionChangeProvider>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  showBorder={rowIdx === topSummaryRowsCount - 1}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerAndTopSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  showBorder={rowIdx === 0}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultRenderersProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","checkboxFormatter","onChange","props","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","className","clsx","disabled","children","_jsx","type","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","_ref$current","current","focus","preventScroll","tabIndex","DataGridDefaultRenderersContext","createContext","undefined","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","_Fragment","valueFormatter","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","width","height","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","scrollIntoView","element","inline","block","createCellEvent","event","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","_topSummaryRows$lengt","topSummaryRowsCount","length","minRowIdx","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","_defaultColumnOptions","_defaultColumnOptions2","_defaultColumnOptions3","_defaultColumnOptions4","_defaultColumnOptions5","_defaultColumnOptions6","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","_rawGroupBy$includes","_rawColumn$width","_rawColumn$minWidth","_rawColumn$maxWidth","_rawColumn$sortable","_rawColumn$resizable","_rawColumn$formatter","includes","_column$groupFormatte","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","_columnWidths$get","get","set","columnMetric","gridTemplateColumns","join","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","isWidthInitialized","setWidthInitialized","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","callbackFn","useCallback","useRovingCellRef","skipCellFocusRef","isChildFocused","setIsChildFocused","contains","document","activeElement","onFocus","currentTarget","isFocusable","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","flexWidthViewportColumns","unsizedFlexWidthViewportColumns","filter","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","_expandedGroupIds$has","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","sortStatus","preventDefault","handleClick","onClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","_column$headerRendere","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","headerCellClass","defaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onDoubleClick","handleFocus","role","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onContextMenu","onRowChange","cellClass","selectCellWrapper","openEditor","handleContextMenu","handleDoubleClick","handleRowChange","newRow","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","setDraggedOverRowIdx","onMouseEnter","isChildRow","handleDragEnter","RowComponent","forwardRef","defaultRowRenderer","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","call","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","_column$summaryFormat","summaryCellClass","summaryFormatter","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","bottom","isTop","showBorder","ariaRowIndex","cellEditing","EditCell","closeEditor","navigate","_column$editorOptions","_column$editorOptions2","_column$editorOptions3","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","cancelFrameRequest","cancelAnimationFrame","onWindowCaptureMouseDown","requestAnimationFrame","capture","mode","commitChanges","renderFormatter","onMouseDownCapture","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","stopPropagation","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","onMouseDown","arrow","arrowClassname","sortIcon","sortPriority","DataGrid","_ref","_renderers$rowRendere","_ref2","_renderers$sortStatus","_ref3","_renderers$checkboxFo","_renderers$noRowsFall","_bottomSummaryRows$le","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onCellKeyDown","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","ariaDescribedBy","testId","defaultRenderers","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridWidth","gridHeight","isSelectable","leftKey","rightKey","defaultGridComponents","allRowsSelected","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","handleColumnResize","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectGroupLatest","selectHeaderCellLatest","toggleGroupLatest","isSamePosition","newColumnWidths","grid","measuringCell","querySelector","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","newTemplateColumns","measuredWidth","measuredWidthPx","selectAllRows","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","handleCellInput","handleScroll","flushSync","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","enableEditor","_gridRef$current","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","_selectedRows$has","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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"}