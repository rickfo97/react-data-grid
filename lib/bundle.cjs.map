{"version":3,"file":"bundle.cjs","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/CheckboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/HeaderRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/SortIcon.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding-block: 0;\n  padding-inline: 8px;\n  border-inline-end: 1px solid var(--rdg-border-color);\n  border-block-end: 1px solid var(--rdg-border-color);\n  grid-row-start: var(--rdg-grid-row-start);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not calculate width when contain is set to style or size\nexport const cellAutoResizeClassname = css`\n  .${cell} {\n    contain: content;\n  }\n`;\n\nexport const cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --rdg-selection-color: #66afe9;\n  --rdg-font-size: 14px;\n\n  display: grid;\n\n  color-scheme: var(--rdg-color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  block-size: 350px;\n  border: 1px solid var(--rdg-border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--rdg-background-color);\n  color: var(--rdg-color);\n  font-size: var(--rdg-font-size);\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /* needed on Firefox */\n  &::before {\n    content: '';\n    grid-column: 1/-1;\n    grid-row: 1/-1;\n  }\n\n  &.rdg-dark {\n    --rdg-color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --rdg-color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  grid-column: 1/-1;\n  pointer-events: none;\n  /* Should have a higher value than 3 to show up above header row */\n  z-index: 4;\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  display: contents;\n  line-height: var(--rdg-row-height);\n  background-color: var(--rdg-background-color);\n\n  &:hover {\n    background-color: var(--rdg-row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--rdg-row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  outline: 2px solid var(--rdg-selection-color);\n  outline-offset: -2px;\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected`;\n\nexport const rowSelectedWithFrozenCell = css`\n  &::before {\n    content: '';\n    display: inline-block;\n    height: 100%;\n    position: sticky;\n    inset-inline-start: 0;\n    border-inline-start: 2px solid var(--rdg-selection-color);\n  }\n`;\n","import { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-inline-end: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  inline-size: 20px;\n  block-size: 20px;\n  border: 2px solid var(--rdg-border-color);\n  background-color: var(--rdg-background-color);\n  .${checkboxInput}:checked + & {\n    background-color: var(--rdg-checkbox-color);\n    outline: 4px solid var(--rdg-background-color);\n    outline-offset: -6px;\n  }\n  .${checkboxInput}:focus + & {\n    border-color: var(--rdg-checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n  .${checkbox} {\n    border-color: var(--rdg-checkbox-disabled-border-color);\n    background-color: var(--rdg-checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport const CheckboxFormatter = forwardRef<HTMLInputElement, CheckboxFormatterProps>(\n  function CheckboxFormatter({ onChange, ...props }: CheckboxFormatterProps, ref) {\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n      onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n    }\n\n    return (\n      <label\n        className={clsx(checkboxLabelClassname, {\n          [checkboxLabelDisabledClassname]: props.disabled\n        })}\n      >\n        <input\n          type=\"checkbox\"\n          ref={ref}\n          {...props}\n          className={checkboxInputClassname}\n          onChange={handleChange}\n        />\n        <div className={checkboxClassname} />\n      </label>\n    );\n  }\n);\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Components, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Components<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Components<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const Formatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <Formatter\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      ref={ref}\n      tabIndex={tabIndex}\n      disabled={disabled}\n      checked={value}\n      onChange={onChange}\n    />\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-inline-start: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min, round } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth, defaultWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, defaultMinWidth, defaultMaxWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        // avoid decimals as subpixel positioning can lead to cell borders not being displayed\n        const unallocatedWidth = viewportWidth - allocatedWidth;\n        const unallocatedColumnWidth = round(unallocatedWidth / unassignedColumnsCount);\n        width = clampColumnWidth(unallocatedColumnWidth, column, defaultMinWidth, defaultMaxWidth);\n        allocatedWidth += width;\n        unassignedColumnsCount--;\n        columnMetrics.set(column, { width, left });\n      }\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [\n    columnWidths,\n    columns,\n    viewportWidth,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    lastFrozenColumnIndex\n  ]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number,\n  defaultWidth: Maybe<string | number>\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n\n  // If the column's width is not defined, fallback to the default width\n  width = width ?? defaultWidth;\n\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  defaultMinWidth: number,\n  defaultMaxWidth: Maybe<number>\n): number {\n  width = max(width, minWidth ?? defaultMinWidth);\n  maxWidth = maxWidth ?? defaultMaxWidth;\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    function saveDimensions() {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1733042\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    }\n\n    saveDimensions();\n    const resizeObserver = new ResizeObserver(saveDimensions);\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function HeaderRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const SortIcon = useDefaultComponents<R, SR>()!.sortIcon!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        <SortIcon sortDirection={sortDirection} />\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport DefaultHeaderRenderer from './HeaderRenderer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const HeaderRenderer = column.headerRenderer ?? DefaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'auto');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        minWidth: column.minWidth ?? undefined,\n        maxWidth: column.maxWidth ?? undefined\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      <HeaderRenderer\n        column={column}\n        sortDirection={sortDirection}\n        priority={priority}\n        onSort={onSort}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        isCellSelected={isCellSelected}\n      />\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'auto') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  display: contents;\n  line-height: var(--rdg-header-row-height);\n  background-color: var(--rdg-header-background-color);\n  font-weight: bold;\n\n  > .${cell} {\n    /* Should have a higher value than 1 to show up above frozen cells */\n    z-index: 2;\n    position: sticky;\n    inset-block-start: 0;\n  }\n\n  > .${cellFrozen} {\n    z-index: 3;\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      <column.formatter\n        column={column}\n        row={row}\n        isCellSelected={isCellSelected}\n        onRowChange={onRowChange}\n      />\n      {dragHandle}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    isChildRow,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    isChildRow ? \"rdg-child-row\" : \"\",\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx && childRows.length > 1;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--rdg-header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-inline-end: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          childRows.length > 1 ? 'rdg-group-row-has-children' : '',\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  inset-block-start: var(--rdg-summary-row-top);\n  inset-block-end: var(--rdg-summary-row-bottom);\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    line-height: var(--rdg-summary-row-height);\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-block-start: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [summaryRowBorderClassname]: rowIdx === 0,\n          [rowSelectedClassname]: selectedCellIdx === -1\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n  scrollToCell: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor,\n  scrollToCell\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n      scrollToCell();\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  inset-inline-end: 0;\n  inset-block-end: 0;\n  inline-size: 8px;\n  block-size: 8px;\n  background-color: var(--rdg-selection-color);\n\n  &:hover {\n    inline-size: 16px;\n    block-size: 16px;\n    border: 2px solid var(--rdg-selection-color);\n    background-color: var(--rdg-background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortIconProps } from './types';\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function SortIcon({ sortDirection }: SortIconProps) {\n  return sortDirection !== undefined ? (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  ) : null;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  cellAutoResizeClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport SortIcon from './SortIcon';\nimport { CheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Components,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  components?: Maybe<Components<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    components,\n    className,\n    style,\n    rowClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = components?.rowRenderer ?? defaultComponents?.rowRenderer ?? Row;\n  const sortIcon = components?.sortIcon ?? defaultComponents?.sortIcon ?? SortIcon;\n  const checkboxFormatter =\n    components?.checkboxFormatter ?? defaultComponents?.checkboxFormatter ?? CheckboxFormatter;\n  const noRowsFallback = components?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortIcon,\n      checkboxFormatter\n    }),\n    [sortIcon, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const columnElement = gridRef.current!.querySelector(\n      `[aria-colindex=\"${autoResizeColumn.idx + 1}\"]`\n    )!;\n    const width = columnElement.clientWidth + 2;\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number | 'auto') => {\n      if (width === 'auto') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    // scrollLeft is nagative when direction is rtl\n    setScrollLeft(abs(scrollLeft));\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      scrollToCell(position);\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    newSizes[autoResizeColumn.idx] = 'max-content';\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        scrollToCell={() => {\n          scrollToCell(selectedPosition);\n        }}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          isChildRow={hasGroups}\n          gridRowStart={gridRowStart}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (summaryRowsCount > 0) {\n    templateRows += ` repeat(${summaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [cellAutoResizeClassname]: autoResizeColumn !== null\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChange}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {summaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = headerRowsCount + rows.length + rowIdx - 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (summaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (summaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  inline-size: 100%;\n  block-size: 100%;\n  padding-block: 0;\n  padding-inline: 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--rdg-color);\n  background-color: var(--rdg-background-color);\n\n  font-family: inherit;\n  font-size: var(--rdg-font-size);\n\n  &:focus {\n    border-color: var(--rdg-selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellAutoResizeClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","CheckboxFormatter","forwardRef","onChange","props","CheckboxFormatterProps","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","className","clsx","disabled","children","_jsx","type","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","_ref$current","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","Formatter","checkboxFormatter","ValueFormatter","_Fragment","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","onKeyDown","viewBox","width","height","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","length","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","getRowStyle","getCellStyle","gridColumnStart","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","_defaultColumnOptions","_defaultColumnOptions2","_defaultColumnOptions3","_defaultColumnOptions4","defaultWidth","defaultMinWidth","minWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","_rawGroupBy$includes","_rawColumn$sortable","_rawColumn$resizable","_rawColumn$formatter","includes","_column$groupFormatte","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","columnMetric","get","unallocatedWidth","unallocatedColumnWidth","gridTemplateColumns","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","_width","test","parseInt","_maxWidth","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","saveDimensions","clientWidth","clientHeight","devicePixelRatio","resizeObserver","observe","disconnect","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","forceRender","onFocus","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","_expandedGroupIds$has","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","HeaderRenderer","sortDirection","priority","onSort","SortableHeaderCell","SortIcon","sortIcon","preventDefault","handleClick","onClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","_column$headerRendere","_column$minWidth","_column$maxWidth","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","headerCellClass","DefaultHeaderRenderer","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onDoubleClick","handleFocus","role","style","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","_column$editorOptions","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","onContextMenu","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","isChildRow","handleRowChange","newRow","handleDragEnter","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","summaryRow","summaryRowBorderClassname","summaryRowClassname","SummaryRow","bottom","ariaRowIndex","cellEditing","EditCell","closeEditor","scrollToCell","_column$editorOptions4","_column$editorOptions5","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","stopPropagation","_column$editorOptions2","_column$editorOptions3","onNavigation","commitChanges","renderFormatter","onMouseDownCapture","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","onMouseDown","arrow","arrowClassname","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","components","ariaDescribedBy","testId","_rowHeight","_ref","_components$rowRender","_ref2","_components$sortIcon","_ref3","_components$checkboxF","_components$noRowsFal","_enableVirtualization","_direction","_summaryRows$length","defaultComponents","RowRenderer","rowRenderer","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","headerRowsCount","summaryRowsCount","isSelectable","isHeaderRowSelected","leftKey","rightKey","defaultGridComponents","size","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","isSamePosition","columnElement","querySelector","newColumnWidths","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","updatedTargetRow","targetColumnKey","onCellKeyDown","call","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","_rowIdx","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","newSizes","split","join","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","_selectedRows$has","c","templateRows","isGroupRowFocused","dir","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor","onBlur"],"mappings":"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"}